var documenterSearchIndex = {"docs":
[{"location":"man/usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"man/usage/#A-simple-example","page":"Usage","title":"A simple example","text":"","category":"section"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"Let's begin by rendering a simple formula:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"using LatexSVG\n\nsvg_output = latexsvg(raw\"\"\"\n\\[\ni \\hbar \\frac{\\mathrm{d}}{\\mathrm{d} t} | \\phi(t) \\rangle = \\hat{\\mathcal{H}} | \\phi(t) \\rangle\n\\]\n\"\"\")","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"latexsvg is the main function of this package. Here with the most simple usage, we pass a string of LaTeX code and latexsvg outputs the SVG image. Here it is automatically captured by Documenter.jl and displayed inline in this webpage. Any SVG- or HTML-capable display environment, such as Documenter.jl, Jupyter, VS Code, and Pluto.jl, can display the SVG output.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"In addition to the latexsvg function, you can also use the @Lsvg_str macro, which is functionally equivalent to latexsvg:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"svg_output = Lsvg\"\"\"\n\\[\ni \\hbar \\frac{\\mathrm{d}}{\\mathrm{d} t} | \\phi(t) \\rangle = \\hat{\\mathcal{H}} | \\phi(t) \\rangle\n\\]\n\"\"\"","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"The output of latexsvg and Lsvg\"...\" is not just a string of SVG code; it is a LaTeXSVG object that contains the SVG as well as your LaTeX input and the preamble for record-keeping (You can customize the preamble; see the section Customizing the preamble.) Thus, if you are in an environment that cannot display SVG/HTML natively, such as the Julia REPL, this is what you'll see:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"svg_output = latexsvg(raw\"\"\"\n\\[\ni \\hbar \\frac{\\mathrm{d}}{\\mathrm{d} t} | \\phi(t) \\rangle = \\hat{\\mathcal{H}} | \\phi(t) \\rangle\n\\]\n\"\"\")","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"In this case, you can either load an SVG/HTML-capable display or save the output directly to a file:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"julia> savesvg(\"/path/to/file.svg\", svg_output)","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"The functions and macros introduced so far have a number of extra features. Here are the complete descriptions:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"latexsvg\n@Lsvg_str\nLaTeXSVG","category":"page"},{"location":"man/usage/#LatexSVG.latexsvg","page":"Usage","title":"LatexSVG.latexsvg","text":"latexsvg(latex::AbstractString, engine=texengine(); standalone=false, extra_args=[])\n\nRenders latex as an SVG string. latex is the LaTeX code that you want to render, engine is the LaTeX engine to use and defaults to the one currently in use for this session. You can change the engine for this session with texengine!, or set the default permanently with config!.\n\nThe output can be configured with a few keyword arguments:\n\nIf standalone=true, it is assumed that latex is a complete document, thus the preamble will be ignored. Otherwise (and this is the default) latex will be inserted into a LaTeX document, whose preamble can be configured with add_preamble! and reset with reset_preamble!. You can get the current complete preamble with preamble.\nextra_args allows you to pass additional commandline flags/arguments to the LaTeX engine. For instance, if your LaTeX code contains minted code blocks (for some reason), you would need to set extra_args=[\"--shell-escape\"].\n\n\n\n\n\n","category":"function"},{"location":"man/usage/#LatexSVG.@Lsvg_str","page":"Usage","title":"LatexSVG.@Lsvg_str","text":"Lsvg\"...\"\n\nRenders the input as SVG with the current preamble and LaTeX engine.\n\nSimilar to raw\"...\" strings, you do not have to escape special characters like \\ and $, which makes it easier to write LaTeX.\n\nYou can interpolate variables using the %$ syntax, which is the same as the L\"...\" string macro in LaTeXStrings.jl. For instance, if there is a variable x = 10, then Lsvg\"number %$x\" renders the string \"number 10\". However, unlike the L\"...\" macro, Lsvg\"...\" does not automatically wrap your input in a pair of dollar signs, since it is very much possible that you'll want to use some other LaTeX environments.\n\n\n\n\n\n","category":"macro"},{"location":"man/usage/#LatexSVG.LaTeXSVG","page":"Usage","title":"LatexSVG.LaTeXSVG","text":"LaTeXSVG(latex::AbstractString, svg::String; standalone::Bool=false)\n\nThis type contains the LaTeX code to be rendered, the preamble, and the rendered SVG string. Both latexsvg and @Lsvg_str return objects of this type.\n\nLaTeXSVG objects contain 4 fields:\n\nlatex contains the LaTeX input.\nstandalone indicates whether latex is a complete LaTeX document. If standalone=true then pre is empty.\npre is a vector of strings containing the preamble, which is recorded from the global preamble when a LaTeXSVG object is contructed, namely when latexsvg or @Lsvg_str is called.\nsvg contains the SVG string.\n\nYou can access these fields with the usual dot syntax.\n\nnote: Note\nYou should never need to contruct a LaTeXSVG object yourself.\n\nnote: Note\nIf you are using VSCode, by default the color of the SVG displayed in the plot pane adapts to the color scheme of VSCode (black for light mode and white for dark mode.) Rest assured that this adaptive color is not written into the SVG itself. Also, if you defined custom colors in your LaTeX, it should be displayed (and saved to file) faithfully.\n\n\n\n\n\n","category":"type"},{"location":"man/usage/#Configurations","page":"Usage","title":"Configurations","text":"","category":"section"},{"location":"man/usage/#Customizing-the-preamble","page":"Usage","title":"Customizing the preamble","text":"","category":"section"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"By default, the preamble is populated with","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"\\usepackage{amsmath,amsthm,amssymb}\n\\usepackage{color}","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"You can configure the preamble with add_preamble! and reset_preamble!:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"add_preamble!\nreset_preamble!","category":"page"},{"location":"man/usage/#LatexSVG.add_preamble!","page":"Usage","title":"LatexSVG.add_preamble!","text":"add_preamble!(pre::AbstractString...; reset=false)\n\nAdds preamble statements on top of the default preamble. pre is any number of AbstractStrings.\n\nIf you already have a number of preamble statements and you would like to get rid of them first before adding new statements, pass reset=true.\n\n\n\n\n\n","category":"function"},{"location":"man/usage/#LatexSVG.reset_preamble!","page":"Usage","title":"LatexSVG.reset_preamble!","text":"reset_preamble!()\n\nResets the preamble to the default.\n\n\n\n\n\n","category":"function"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"For example, here we can do","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"add_preamble!(\n    \"\\\\usepackage[no-math]{fontspec}\",\n    \"\\\\setmainfont{texgyrepagella}[Extension=.otf,UprightFont=*-regular,ItalicFont=*-italic,BoldFont=*-bold,BoldItalicFont=*-bolditalic]\",\n    \"\\\\usepackage[euler-hat-accent,euler-digits]{eulervm}\",\n    \"\\\\usepackage{physics}\"\n)","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"You can inspect the complete preamble with preamble:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"preamble","category":"page"},{"location":"man/usage/#LatexSVG.preamble","page":"Usage","title":"LatexSVG.preamble","text":"preamble()\n\nReturns the current preamble.\n\n\n\n\n\n","category":"function"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"add_preamble! also returns the complete preamble immediately, as shown above.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"Now let's render the same formula as the one in the previous section:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"svg_output = Lsvg\"\"\"\n\\[\ni \\hbar \\dv{t} \\ket{\\phi(t)} = \\hat{\\mathcal{H}} \\ket{\\phi(t)}\n\\]\n\"\"\"","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"The input is now significantly more concise and the output has a much more distinct look.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"One more example, just for fun:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"maxwell = Lsvg\"\"\"\n\\begin{align*}\n \\div{ \\vb{E} } &= \\frac{\\rho}{\\epsilon_0} \\\\\n \\div{ \\vb{B} } &= 0                       \\\\  % someone please find\n\\curl{ \\vb{E} } &= - \\pdv{\\vb{B}}{t}       \\\\  % the magnetic monopole\n\\curl{ \\vb{B} } &= \\mu_0 \\vb{J} + \\mu_0 \\epsilon_0 \\pdv{\\vb{E}}{t}\n\\end{align*}\n\"\"\"","category":"page"},{"location":"man/usage/#Changing-LaTeX-engine","page":"Usage","title":"Changing LaTeX engine","text":"","category":"section"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"At load time, LatexSVG searches for xelatex, pdflatex, and lualatex in your PATH in order, and uses the first one it finds. You can also choose from the available options with texengine!:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"texengine!\ntexengine\nXeLaTeX\nPDFLaTeX\nLuaLaTeX","category":"page"},{"location":"man/usage/#LatexSVG.texengine!","page":"Usage","title":"LatexSVG.texengine!","text":"texengine!(eng)\n\nSets the LaTeX engine for this session. eng can be PDFLaTeX, XeLaTeX, or LuaLaTeX, e.g.\n\ntexengine!(PDFLaTeX)\n\n\n\n\n\n","category":"function"},{"location":"man/usage/#LatexSVG.texengine","page":"Usage","title":"LatexSVG.texengine","text":"texengine()\n\nReturns the current LaTeX engine.\n\n\n\n\n\n","category":"function"},{"location":"man/usage/#LatexSVG.XeLaTeX","page":"Usage","title":"LatexSVG.XeLaTeX","text":"XeLaTeX\n\nThe xelatex engine.\n\nCommand line options -no-pdf, -quiet, and -halt-on-error are passed to the xelatex executable, and both the input and output directories are also handled. If you would like to pass additional command line arguments, use the latexsvg function.\n\n\n\n\n\n","category":"type"},{"location":"man/usage/#LatexSVG.PDFLaTeX","page":"Usage","title":"LatexSVG.PDFLaTeX","text":"PDFLaTeX\n\nThe pdflatex engine.\n\nCommand line options -output-format=dvi, -quiet, and -halt-on-error are passed to the pdflatex executable, and both the input and output directories are also handled. If you would like to pass additional command line arguments, use the latexsvg function.\n\n\n\n\n\n","category":"type"},{"location":"man/usage/#LatexSVG.LuaLaTeX","page":"Usage","title":"LatexSVG.LuaLaTeX","text":"LuaLaTeX\n\nThe lualatex engine.\n\nCommand line options --output-format=dvi, --interaction=batchmode, and --halt-on-error are passed to the lualatex executable, and both the input and output directories are also handled. If you would like to pass additional command line arguments, use the latexsvg function.\n\n\n\n\n\n","category":"type"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"Additionally, you can pass your LaTeX engine of choice directly to latexsvg, as shown in the previous section.","category":"page"},{"location":"man/usage/#Persisting-the-configurations","page":"Usage","title":"Persisting the configurations","text":"","category":"section"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"You can store your configurations and have them persist between Julia sessions using the config! function:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"config!","category":"page"},{"location":"man/usage/#LatexSVG.config!","page":"Usage","title":"LatexSVG.config!","text":"config!(; texengine=nothing, preamble=nothing, export_prefs=false)\n\nConfigure persistent settings for the LaTeX engine and the preamble:\n\ntexengine can be XeLaTeX, PDFLaTeX, or LuaLaTeX\npreamble can be an AbstractString or a Vector of AbstractStrings.\n\nTwo examples:\n\njulia> config!(texengine=PDFLaTeX)\n\nThis sets the default LaTeX engine to be PDFLaTeX for all future sessions.\n\njulia> config!(preamble=[\"\\usepackage{mathtools}\", \"\\usepackage{xcolor}\"])\n\nThis sets the default preamble to be\n\n\\usepackage{mathtools}\n\\usepackage{xcolor}\n\nfor all future sessions, replacing the original default of\n\n\\usepackage{amsmath,amsthm,amssymb}\n\\usepackage{color}\n\nYou can also call config!() without any keyword argument. In this case your current LaTeX engine and preamble will be stored as the default.\n\nThese preferences are stored in a LocalPreferences.toml file in your active project. If export_prefs=true, they will instead be written into your Project.toml. Either way, if you have multiple projects using this package you need to set the preference for them individually.\n\n\n\n\n\n","category":"function"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"As another example, so far we've left XeLaTeX as the LaTeX engine and configured a number of preamble statements; as a result, when we call config!(), a LocalPreferences.toml file is created in our project with this content:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"[LatexSVG]\npreamble = [\"\\\\usepackage{amsmath,amsthm,amssymb}\", \"\\\\usepackage{color}\", \"\\\\usepackage[no-math]{fontspec}\", \"\\\\setmainfont{texgyrepagella}[Extension=.otf,UprightFont=*-regular,ItalicFont=*-italic,BoldFont=*-bold,BoldItalicFont=*-bolditalic]\", \"\\\\usepackage[euler-hat-accent,euler-digits]{eulervm}\", \"\\\\usepackage{physics}\"]\ntexengine = \"XeLaTeX\"","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"Then, every time we load this package in the future, these preferences get loaded as the default.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"You can also inspect your config with config:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"config","category":"page"},{"location":"man/usage/#LatexSVG.config","page":"Usage","title":"LatexSVG.config","text":"config(key::String)\n\nObtain the persistent settings for the LaTeX engine and the preamble. key can be \"texengine\" or \"preamble\". Use config! to configure these settings.\n\n\n\n\n\n","category":"function"},{"location":"man/usage/#Use-with-other-packages","page":"Usage","title":"Use with other packages","text":"","category":"section"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"The latexsvg function accepts any AbstractString object as input. Notably, output from LaTeXStrings.jl and Latexify.jl work out of the box. For example, you can do","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"using Latexify, LatexSVG\n\nlatexify(\n    [2//3  \"e^(-c*t)\" :(x/(x+k_1))\n     1+3im \"gamma(n)\" :(log10(x))], starred=true\n) |> latexsvg","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"and the latexified matrix will be nicely rendered as SVG.","category":"page"},{"location":"#LatexSVG.jl","page":"Introduction","title":"LatexSVG.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This is a small package that renders LaTeX as SVG using the native LaTeX installation on your computer, instead of javascript-based solutions such as mathjax or KaTeX. As a result, it accepts a much wider range of LaTeX input and is significantly more powerful, but is also quite a bit slower.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Depending on your use case, this package may or may not be what you want. Specifically, if you want to render math on a webpage, this package is not yet a full replacement of mathjax or KaTeX (not without a lot of manual work from the end user, anyway); on the other hand, use cases such as building vector graphics and animations should be served much better by this package.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Head over to Installation for installation instructions.","category":"page"},{"location":"man/htmldisplay/#Displaying-in-a-webpage","page":"Displaying in a webpage","title":"Displaying in a webpage","text":"","category":"section"},{"location":"man/htmldisplay/","page":"Displaying in a webpage","title":"Displaying in a webpage","text":"If you are using the output SVG file directly in HTML, there are a few things you need to take note.","category":"page"},{"location":"man/htmldisplay/","page":"Displaying in a webpage","title":"Displaying in a webpage","text":"By default, the saved SVG file hard-codes its dimensions with the width and height attributes. This is not recommended as you instead want the SVG to resize based on the content on the webpage (which is possible due to the viewBox attribute so don't mess with that.) You'll also want additional styles to ensure that the SVG is properly positioned. The savesvg function helps you accomplish this:","category":"page"},{"location":"man/htmldisplay/","page":"Displaying in a webpage","title":"Displaying in a webpage","text":"savesvg","category":"page"},{"location":"man/htmldisplay/#LatexSVG.savesvg","page":"Displaying in a webpage","title":"LatexSVG.savesvg","text":"savesvg(filepath::AbstractString, svg::LaTeXSVG; web_display=false, web_inline=false)\n\nSaves svg to filepath.\n\nIf web_display=true, some adjustments are made to the SVG before it is saved:\n\nThe height of the SVG is scaled by a factor of 1.2 and its unit changed to rem, and the width attribute is deleted.\nA style attribute style=\"display: block; margin: auto; max-width: 80%\" is added.\nA class=\"latexsvg-display\" attribute is added to the <svg> tag.\n\nIf web_inline=true, the following adjustments are made:\n\nThe height of the SVG is scaled by a factor of 1.2 and its unit changed to rem, and the width attribute is deleted.\nA style attribute style=\"vertical-align: middle\" is added.\nA class=\"latexsvg-inline\" attribute is added.\n\nRefer to the documentation for details.\n\nNote that web_display and web_inline cannot both be true. If they are both false, the vanilla SVG output is saved with no modification.\n\n\n\n\n\n","category":"function"},{"location":"man/htmldisplay/","page":"Displaying in a webpage","title":"Displaying in a webpage","text":"Each of the 3 adjustments accomplish different things:","category":"page"},{"location":"man/htmldisplay/","page":"Displaying in a webpage","title":"Displaying in a webpage","text":"Scaling: the first adjustment makes the font size in the SVG scale to exactly 1.2 times the font size associated with the root <html> tag. This ensures that LaTeX is displayed more nicely and elements such as subscripts and superscripts are legible. If you prefer a different scale, simply change the height attribute. You can also change the unit to em so that it scales with the font size of its parent instead of the root.\nAlso note that, since the width attribute no longer exists, if you would like to manually scale the SVG to a certain size with CSS (which then overrides the font-size based scaling), you should always set the height attribute.\nPositioning: the second adjustment helps to position the SVG with respect to the surrounding content, but it doens't do the trick by itself. You need to additionally place the SVG inside a container. For display-style LaTeX:\n<p><span style=\"display: inline-block; width: 100%\">\n<!-- Copy-paste the SVG here -->\n</span><p>\nThis nicely center-aligns the SVG. For inline-style LaTeX, the surrounding HTML should look like\n<p>This is an inline SVG\n<span>\n<!-- Copy-paste the SVG here -->\n</span>\nfrom LatexSVG.jl.\n</p>\nThis aligns the SVG with the surrounding text.","category":"page"},{"location":"man/htmldisplay/","page":"Displaying in a webpage","title":"Displaying in a webpage","text":"The third adjustment is simply there to facilitate further styling directly with CSS. For instance, you may want to change the fill color in accordance with light/dark mode.","category":"page"},{"location":"man/htmldisplay/","page":"Displaying in a webpage","title":"Displaying in a webpage","text":"note: Note\nWith these adjustments, it is recommended that you use the SVG directly inline in HTML (instead of embedding it in, say, an <img /> tag); in fact all the above assumes this. If you prefer the <img /> alternative, simply use the vanilla output.","category":"page"},{"location":"man/htmldisplay/","page":"Displaying in a webpage","title":"Displaying in a webpage","text":"These are just the most basic instructions; the SVG format is very powerful and there is room for a lot of customizations.","category":"page"},{"location":"man/htmldisplay/","page":"Displaying in a webpage","title":"Displaying in a webpage","text":"","category":"page"},{"location":"man/htmldisplay/","page":"Displaying in a webpage","title":"Displaying in a webpage","text":"note: Note\nSadly, the inline style is not yet achieveable in Documenter/Weave/etc., since the Julia flavor of markdown doesn't have support for inline raw HTML and it is difficult to have them capture inline HTML output. This means that, as mentioned in the introduction, this package can't yet function as a complete replacement for mathjax or KaTeX in these environments without some user effort.The display style works just fine though (in Documenter at least; Weave prefers capturing plain SVG over HTML so some fixing is needed.)","category":"page"},{"location":"man/htmldisplay/","page":"Displaying in a webpage","title":"Displaying in a webpage","text":"note: Note\nContinuing the point above, one way to replace mathjax with this package is to use pandoc filters. You can simply write a filter that replaces all inline and display math elements in your markdown document with raw HTML code blocks that contain the SVG output from this package. Downside being, again, that this doesn't work with anything built on top of Julia markdown, however there are still plenty of places where you can use this method. (Also, there isn't yet a Julia package that facilitates writing pandoc filters, although it's nothing more than manipulating JSON so it shouldn't be too hard in principle.)","category":"page"},{"location":"man/installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"man/installation/#LaTeX","page":"Installation","title":"LaTeX","text":"","category":"section"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"Make sure you have a working LaTeX installation on your computer. TeX Live and MikTeX are both fine. Also make sure that executables xelatex, pdflatex, lualatex, and most importantly dvisvgm (which does all the heavy-lifting) are available in your PATH.","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"By default LatexSVG.jl loads LaTeX packages amsmath, amsthm, amssymb, and color. They should already come prepackaged in your LaTeX distribution, but if not, install them first. If you use the MiKTeX distribution, you can also configure it to automatically install missing LaTeX packages. Alternatively, the usage guide details how you can configure what LaTeX packages are loaded by default.","category":"page"},{"location":"man/installation/#LatexSVG.jl","page":"Installation","title":"LatexSVG.jl","text":"","category":"section"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"Once you have a working LaTeX installation, go ahead and install this package in the Julia REPL:","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"julia> using Pkg\njulia> Pkg.install(\"LatexSVG\")","category":"page"}]
}
